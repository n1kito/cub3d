#!/bin/bash

# Usage: ./cub3D_tester
# To add more maps to test, add them to maps/ directory

################################################################################
##                             USEFUL VARIABLES                               ##
################################################################################

EXECUTABLE_PATH=".."
EXECUTABLE="cub3D"
MAPS_DIRECTORY="maps"

# Variables used to dynamically count the number of tests ran.
TEST_COUNT=0
TEST_PASSED=0

## RETURNS
################################################################################

OK="[OK]"
KO="‚ùå"

## COLORS
################################################################################

RED='\033[0;31m'
MAGENTA='\033[0;35m'
BRED='\033[1;31m'
GREEN='\033[0;32m'
BGREEN='\033[1;32m'
YELLOW='\033[0;33m'
BYELLOW='\033[1;33m'
BLUE='\033[0;36m'
PINK='\033[0;35m'
ITALIC='\e[3m'
CODE='\e[1;41;100m' # White text on grey background
# CODE='\e[7m' # Second option, this one just inverts
NC='\033[0m' # No Color
SEPARATOR='‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë'

################################################################################
##                                  HEADER                                    ##
################################################################################

## DISPLAY TITLE
clear -x # clears screen, equals to CTRL + L in Terminal

echo
echo "$SEPARATOR";
echo
printf "                ${GREEN}  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ${NC}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${GREEN}‚ïó${NC} ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${GREEN}‚ïó${NC} \n";
printf "                ${GREEN} ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó${NC}${GREEN}‚ïö‚ïê‚ïê‚ïê‚ïê${NC}‚ñà‚ñà${GREEN}‚ïó${NC}‚ñà‚ñà${GREEN}‚ïî‚ïê‚ïê${NC}‚ñà‚ñà${GREEN}‚ïó${NC}\n";
printf "                ${GREEN} ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù${NC} ‚ñà‚ñà‚ñà‚ñà‚ñà${GREEN}‚ïî‚ïù${NC}‚ñà‚ñà${GREEN}‚ïë${NC}  ‚ñà‚ñà${GREEN}‚ïë${NC}\n";
printf "                ${GREEN} ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó${NC} ${GREEN}‚ïö‚ïê‚ïê‚ïê${NC}‚ñà‚ñà${GREEN}‚ïó${NC}‚ñà‚ñà${GREEN}‚ïë${NC}  ‚ñà‚ñà${GREEN}‚ïë${NC}\n";
printf "                ${GREEN} ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù${NC}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${GREEN}‚ïî‚ïù${NC}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà${GREEN}‚ïî‚ïù${NC}\n";
printf "                ${GREEN}  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ${NC}${GREEN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC} \n";
printf "                            \e[2m(tester by nikito üî•)\e[22m"
printf "\n"

################################################################################
##                             PRELIMINARY CHECKS                             ##
################################################################################

# Checks that:
#   - The directory that holds the test files exists.
#   - That it actually has files in it.
#   - (The individual files checks are done in the testing function).

if [ -d "${MAPS_DIRECTORY}" ]
then
      TEST_FILES_CHECK=$(ls $MAPS_DIRECTORY | wc -l)
      if [ "$TEST_FILES_CHECK" -eq 0 ]; then
        printf "\n         ‚ö†Ô∏è  ${BRED}Error${NC}${RED}: there are no map files in the ${BRED}${MAPS_DIRECTORY}${NC}${RED}/ directory${NC} ‚ö†Ô∏è\n"
        printf "\n               ${ITALIC}Come back when you have some maps to test üêô${NC}\n"
        printf "\n${SEPARATOR}\n\n"
        exit
     fi
else
      printf "\n              ‚ö†Ô∏è  ${BRED}Error${RED}: the ${BRED}${MAPS_DIRECTORY}${NC}${RED}/ directory does not exist${NC} ‚ö†Ô∏è\n"
      printf "\n               ${ITALIC}Come back when you have some maps to test üêô${NC}\n"
      printf "\n${SEPARATOR}\n\n"
      exit
fi

# for file in ./maps/*
# do
# 	echo $file
# done

################################################################################
##                            TESTING LOOP FUNCTION                           ##
################################################################################

# test_map()
# Argument 1: name of the test file

test_map() { # TODO modify this so the expected error is passed as an argument ?

  # This section checks that the test file exists and that it is not empty.
  # If it is not empty, it checks that the file has at least 2 lines in it.

	# Cannot be used here because some files should be empty or directories.

	if [ -f $1 ]; then
		FILE_CHECK=$(cat $1 | wc -l)
		if [ "$FILE_CHECK" -eq 0 ]; then
			printf " ${YELLOW}[${BYELLOW}‚ö†Ô∏è ${YELLOW}]\t\"$1\" is empty.${NC}\n"
			return
		fi
	else
		printf " ${YELLOW}[${BYELLOW}‚ö†Ô∏è ${YELLOW}]\t\"$1\" file does not exist or is directory.${NC}\n"
		return
	fi

	# printf " ${GREEN}$1 is not empty${NC}\n"
	RESULT=$(${EXECUTABLE_PATH}/${EXECUTABLE} $1 2>&1)
	RESULT_COUNT=$(${EXECUTABLE_PATH}/${EXECUTABLE} $1 2>&1 | wc -l)
	TEST_NAME=${1%????}						# remove .cub extension from map filename
	TEST_NAME=${TEST_NAME//_/ }				# replace map file name underscores with spaces
	TEST_NAME=$(echo $TEST_NAME | cut -c6-)	# leading ./map/ from map filemame
	if [ "$RESULT_COUNT" -gt 1 ]; then
        printf " ${GREEN}[${NC}${BGREEN}OK${GREEN}]\t$TEST_NAME${NC} " # IF RESULT MATCHES EXPECTED_OUTPUT, PRINT 'OK'
		(( TEST_PASSED++ ))
        (( TEST_COUNT++ ))
	else
        printf " ${RED}[${KO}]${NC}\t${RED}$1" # IF RESULTS DON'T MATCH, PRINT 'KO' ND SHOW TEST, EXPECTED OUTPUT AND RESULT
		(( TEST_COUNT++ ))
	fi
	echo
}

# Print test title

echo
echo
printf "                       ‚ïî‚ï¶‚ïó‚ïî‚ïê‚ïó‚ïî‚ïê‚ïó  ‚ïî‚ï¶‚ïó‚ïî‚ïê‚ïó‚ïî‚ïê‚ïó‚ïî‚ï¶‚ïó‚ïî‚ïê‚ïó‚ï¶‚ïê‚ïó   \n"
printf "                    ** ‚ïë‚ïë‚ïë‚ï†‚ïê‚ï£‚ï†‚ïê‚ïù   ‚ïë ‚ïë‚ï£ ‚ïö‚ïê‚ïó ‚ïë ‚ïë‚ï£ ‚ï†‚ï¶‚ïù **\n"
printf "                       ‚ï© ‚ï©‚ï© ‚ï©‚ï©     ‚ï© ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù ‚ï© ‚ïö‚ïê‚ïù‚ï©‚ïö‚ïê   \n"
echo
echo

for file in ${MAPS_DIRECTORY}/*
do
	test_map $file
done

################################################################################
##                                PRINT RESULTS                               ##
################################################################################

echo
echo "$SEPARATOR";
echo
printf " \e[4mTests passed\e[24m: "
if [ ${TEST_PASSED} -eq ${TEST_COUNT} ]
then
  printf "‚úÖ ${GREEN}${TEST_PASSED}/${TEST_COUNT}${NC}"
else
  printf "\e[5müíÄ\e[0m ${BRED}${TEST_PASSED}${NC}/${TEST_COUNT}"
fi

echo
echo
echo "$SEPARATOR";
echo
